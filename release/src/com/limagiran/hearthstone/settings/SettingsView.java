package com.limagiran.hearthstone.settings;

import static com.limagiran.hearthstone.settings.Settings.EnumSettings.*;
import static com.limagiran.hearthstone.settings.Settings.SET;
import com.limagiran.hearthstone.util.*;
import java.awt.Dimension;
import java.awt.event.*;
import java.util.Optional;
import javax.swing.*;
import javax.swing.event.*;
import org.netbeans.lib.awtextra.*;

/**
 *
 * @author Vinicius
 */
public class SettingsView extends JDialog {

    private static final SettingsView INSTANCE = new SettingsView();

    private Runnable onclick;

    /**
     * Creates new form Settings
     *
     */
    private SettingsView() {
        initComponents();
        initValues();
        inserirAtalhos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelBackground = new JPanel();
        jPanelSettings = new JPanel();
        jLabelTitle = new JLabel();
        jLabelVolumeMusica = new JLabel();
        jSliderVolumeMusica = new JSlider();
        jLabelVolumeEfeitos = new JLabel();
        jSliderVolumeEfeitos = new JSlider();
        jLabelAnimacao = new JLabel();
        jSpinnerMilissegundos = new JSpinner();
        jLabelMilissegundos = new JLabel();
        jButtonDesistirSair = new JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanelSettings.setMinimumSize(new Dimension(450, 250));
        jPanelSettings.setPreferredSize(new Dimension(450, 250));
        jPanelSettings.setLayout(new AbsoluteLayout());

        jLabelTitle.setFont(Fontes.getBelwe(30));
        jLabelTitle.setHorizontalAlignment(SwingConstants.CENTER);
        jLabelTitle.setText("Configurações");
        jPanelSettings.add(jLabelTitle, new AbsoluteConstraints(0, 0, 450, 50));

        jLabelVolumeMusica.setFont(Fontes.getBelwe(18));
        jLabelVolumeMusica.setHorizontalAlignment(SwingConstants.CENTER);
        jLabelVolumeMusica.setText("Volume Música");
        jPanelSettings.add(jLabelVolumeMusica, new AbsoluteConstraints(10, 60, 160, 30));

        jSliderVolumeMusica.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                jSliderVolumeMusicaStateChanged(evt);
            }
        });
        jPanelSettings.add(jSliderVolumeMusica, new AbsoluteConstraints(190, 60, 230, 30));

        jLabelVolumeEfeitos.setFont(Fontes.getBelwe(18));
        jLabelVolumeEfeitos.setHorizontalAlignment(SwingConstants.CENTER);
        jLabelVolumeEfeitos.setText("Volume Efeitos");
        jPanelSettings.add(jLabelVolumeEfeitos, new AbsoluteConstraints(10, 90, 160, 30));

        jSliderVolumeEfeitos.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                jSliderVolumeEfeitosStateChanged(evt);
            }
        });
        jPanelSettings.add(jSliderVolumeEfeitos, new AbsoluteConstraints(190, 90, 230, 30));

        jLabelAnimacao.setFont(Fontes.getBelwe(18));
        jLabelAnimacao.setHorizontalAlignment(SwingConstants.CENTER);
        jLabelAnimacao.setText("Animação");
        jPanelSettings.add(jLabelAnimacao, new AbsoluteConstraints(10, 120, 160, 30));

        jSpinnerMilissegundos.setFont(Fontes.getBelwe(16)
        );
        jSpinnerMilissegundos.setModel(new SpinnerNumberModel(Long.valueOf(1200L), Long.valueOf(500L), Long.valueOf(2500L), Long.valueOf(100L)));
        jSpinnerMilissegundos.setFocusable(false);
        jSpinnerMilissegundos.setRequestFocusEnabled(false);
        jSpinnerMilissegundos.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                jSpinnerMilissegundosStateChanged(evt);
            }
        });
        jPanelSettings.add(jSpinnerMilissegundos, new AbsoluteConstraints(250, 120, 110, 30));

        jLabelMilissegundos.setFont(Fontes.getBelwe(18));
        jLabelMilissegundos.setHorizontalAlignment(SwingConstants.LEFT);
        jLabelMilissegundos.setText("ms");
        jPanelSettings.add(jLabelMilissegundos, new AbsoluteConstraints(360, 120, 40, 30));

        jButtonDesistirSair.setFont(Fontes.getBelwe(18)
        );
        jButtonDesistirSair.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonDesistirSairActionPerformed(evt);
            }
        });
        jPanelSettings.add(jButtonDesistirSair, new AbsoluteConstraints(120, 170, 230, 40));

        GroupLayout jPanelBackgroundLayout = new GroupLayout(jPanelBackground);
        jPanelBackground.setLayout(jPanelBackgroundLayout);
        jPanelBackgroundLayout.setHorizontalGroup(jPanelBackgroundLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanelSettings, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanelBackgroundLayout.setVerticalGroup(jPanelBackgroundLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanelSettings, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBackground, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBackground, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jSliderVolumeMusicaStateChanged(ChangeEvent evt) {//GEN-FIRST:event_jSliderVolumeMusicaStateChanged
        VOLUME_MUSIC.set(((double) jSliderVolumeMusica.getValue()) / 100.0);
    }//GEN-LAST:event_jSliderVolumeMusicaStateChanged

    private void jSliderVolumeEfeitosStateChanged(ChangeEvent evt) {//GEN-FIRST:event_jSliderVolumeEfeitosStateChanged
        VOLUME_EFFECT.set(((double) jSliderVolumeEfeitos.getValue()) / 100.0);
    }//GEN-LAST:event_jSliderVolumeEfeitosStateChanged

    private void jSpinnerMilissegundosStateChanged(ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMilissegundosStateChanged
        TIME_ANIMATION.set(Long.parseLong(jSpinnerMilissegundos.getValue().toString()));
    }//GEN-LAST:event_jSpinnerMilissegundosStateChanged

    private void jButtonDesistirSairActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonDesistirSairActionPerformed
        buttonAction();
    }//GEN-LAST:event_jButtonDesistirSairActionPerformed

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        SET.saveNow();
    }//GEN-LAST:event_formWindowClosing

    /**
     * Executar uma nova instância
     *
     * @param buttonName
     * @param onclick
     */
    public static void main(String buttonName, Runnable onclick) {
        INSTANCE.onclick = onclick;
        INSTANCE.setButtonText(buttonName);
        SwingUtils.runOnUIThread(() -> INSTANCE.setVisible(!INSTANCE.isVisible()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButtonDesistirSair;
    private JLabel jLabelAnimacao;
    private JLabel jLabelMilissegundos;
    private JLabel jLabelTitle;
    private JLabel jLabelVolumeEfeitos;
    private JLabel jLabelVolumeMusica;
    private JPanel jPanelBackground;
    private JPanel jPanelSettings;
    private JSlider jSliderVolumeEfeitos;
    private JSlider jSliderVolumeMusica;
    private JSpinner jSpinnerMilissegundos;
    // End of variables declaration//GEN-END:variables

    private void inserirAtalhos() {
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        getRootPane().setInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "sair");

        getRootPane().getActionMap().put("sair", new AbstractAction() {
            private static final long serialVersionUID = 1L;

            @Override
            public void actionPerformed(ActionEvent arg0) {
                dispose();
            }
        });
    }

    private void initValues() {
        jSliderVolumeMusica.setValue((int) (VOLUME_MUSIC.getDouble() * 100));
        jSliderVolumeEfeitos.setValue((int) (VOLUME_EFFECT.getDouble() * 100));
        jSpinnerMilissegundos.setValue(TIME_ANIMATION.getLong());
        setButtonText("");
    }
    
    private void setButtonText(String text) {
        jButtonDesistirSair.setText(text);
        jButtonDesistirSair.setEnabled(!text.isEmpty());
    }

    private void buttonAction() {
        dispose();
        SET.saveNow();
        Optional.ofNullable(onclick).ifPresent(Runnable::run);
    }

    public static boolean staticIsVisible() {
        return ((INSTANCE != null) && INSTANCE.isVisible());
    }
}
