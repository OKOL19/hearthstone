package  com.limagiran.hearthstone.partida.view;

import com.limagiran.hearthstone.util.Images;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.AbstractAction;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.KeyStroke;
import com.limagiran.hearthstone.util.Audios;
import com.limagiran.hearthstone.util.MouseCursor;

/**
 *
 * @author Vinicius Silva
 */
public class EscolherCard extends javax.swing.JDialog {

    private static EscolherCard instance;
    private final String[] ids;
    private static String selecionado = null;

    /**
     * Exibe uma janela para seleção de um card da lista passada por parâmetro
     *
     * @param titulo mensagem exibida na janela de seleção
     * @param ids lista dos ID's das cartas disponíveis para seleção
     */
    private EscolherCard(String titulo, String[] ids) {
        initComponents();
        maximizar();
        inserirAtalhos();
        this.ids = ids;
        jLabelTitulo.setText(titulo);
        preencher();
    }

    public static void close() {
        if (instance != null) {
            instance.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitulo = new javax.swing.JLabel();
        jPanelCards = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setModal(true);
        setUndecorated(true);
        setResizable(false);

        jLabelTitulo.setFont(new java.awt.Font("Tahoma", 1, 40)); // NOI18N
        jLabelTitulo.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanelCards.setBackground(new Color(0, 0, 0, 0));
        jPanelCards.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanelCards, javax.swing.GroupLayout.PREFERRED_SIZE, 1228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabelTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTitulo)
                .addGap(20, 20, 20)
                .addComponent(jPanelCards, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exibe uma janela para seleção de um card da lista passada por parâmetro
     *
     * @param titulo mensagem exibida na janela de seleção
     * @param ids lista dos ID's das cartas disponíveis para seleção
     * @return id do card selecionado ou null para card não selecionado
     */
    public static String main(String titulo, String[] ids) {
        selecionado = null;
        instance = new EscolherCard(titulo, ids);
        Audios.playEfeitos(Audios.PARTIDA_ESCOLHA_UM);
        instance.setVisible(true);
        return selecionado;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JPanel jPanelCards;
    // End of variables declaration//GEN-END:variables

    /**
     * Maximiza a janela atual e aplica transparência a ela
     */
    private void maximizar() {
        setLocation(0, 0);
        setSize(Toolkit.getDefaultToolkit().getScreenSize());
        setBackground(new Color(0, 0, 0, 100));
        getGlassPane().setCursor(MouseCursor.DEFAULT);
        getGlassPane().setVisible(true);
    }

    /**
     * Preenche o painel com os cards para seleção
     */
    private void preencher() {
        for (int index = 0; index < ids.length; index++) {
            final int i = index;
            JLabel label = new JLabel(Images.getCardIcon(Images.CARD_ORIGINAL, ids[index]));
            label.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseReleased(MouseEvent evt) {
                    selecionado(ids[i]);
                }
            });
            jPanelCards.add(label);
        }
    }

    public void selecionado(String selecionado) {
        EscolherCard.selecionado = selecionado;
        jPanelCards.removeAll();
        dispose();
    }

    public String getSelecionado() {
        return EscolherCard.selecionado;
    }

    private void inserirAtalhos() {
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        getRootPane().setInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW, inputMap);

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "cancelar");

        getRootPane().getActionMap().put("cancelar", new AbstractAction() {
            private static final long serialVersionUID = 1L;

            @Override
            public void actionPerformed(ActionEvent arg0) {
                jPanelCards.removeAll();
                dispose();
            }
        });
    }
}