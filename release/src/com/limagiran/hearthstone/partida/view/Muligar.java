package  com.limagiran.hearthstone.partida.view;

import com.limagiran.hearthstone.util.Utils;
import com.limagiran.hearthstone.card.control.Card;
import com.limagiran.hearthstone.util.Images;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;
import com.limagiran.hearthstone.partida.control.Partida;
import com.limagiran.hearthstone.util.MouseCursor;

/**
 *
 * @author Vinicius Silva
 */
public class Muligar extends javax.swing.JDialog {

    private static Muligar instance;
    private final ImageIcon muligar_x = Images.MULIGAR_X;
    private final List<Card> deck;
    private final JLabel[] labelX;

    /**
     * Creates new form Muligar
     *
     * @param deck deck com as cartas embaralhadas
     * @param quantidade quantidade de cartas disponíveis para troca
     */
    private Muligar(Partida partida) {
        initComponents();
        maximizar();
        this.deck = partida.getHero().getDeck();
        labelX = new JLabel[partida.isVezHeroi()? 3 : 4];
        preencher();
    }

    /**
     * Creates new form Muligar
     *
     * @param partida
     * @return 
     */
    public static Muligar main(Partida partida) {
        return (instance = new Muligar(partida));
    }

    public static void close() {
        if (instance != null) {
            instance.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelCards = new javax.swing.JPanel();
        jButtonConfirmar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setModal(true);
        setUndecorated(true);

        jPanelCards.setBackground(new Color(0, 0, 0, 0));
        jPanelCards.setLayout(new java.awt.GridLayout(1, 0));

        jButtonConfirmar.setText("CONFIRMAR");
        jButtonConfirmar.setFocusPainted(false);
        jButtonConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelCards, javax.swing.GroupLayout.PREFERRED_SIZE, 1228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jPanelCards, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmarActionPerformed
        muligar();
        jPanelCards.removeAll();
        dispose();
    }//GEN-LAST:event_jButtonConfirmarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConfirmar;
    private javax.swing.JPanel jPanelCards;
    // End of variables declaration//GEN-END:variables

    /**
     * Maximiza a janela atual e dá transparência a ela
     */
    private void maximizar() {
        setLocation(0, 0);
        setSize(Toolkit.getDefaultToolkit().getScreenSize());
        setBackground(new Color(0, 0, 0, 100));
        getGlassPane().setCursor(MouseCursor.DEFAULT);
        getGlassPane().setVisible(true);
    }

    /**
     * preenche o painel com a lista de cards disponíveis para muligar
     */
    private void preencher() {
        for (int index = 0; index < labelX.length; index++) {
            JPanel panel = new JPanel(new AbsoluteLayout());
            panel.setBackground(new Color(0, 0, 0, 0));
            JLabel label_card = new JLabel(Images.getCardIcon(Images.CARD_ORIGINAL, deck.get(index).getId()));
            labelX[index] = new JLabel();
            label_card.addMouseListener(eventoClicarNoCard(index));
            labelX[index].addMouseListener(eventoClicarNaImagemX(index));
            panel.add(labelX[index], new AbsoluteConstraints(20, 125));
            panel.add(label_card, new AbsoluteConstraints(0, 0));
            jPanelCards.add(panel);
        }
    }

    /**
     * Verifica se algum card foi selecionado para muligar e realiza a troca
     */
    private void muligar() {
        List<Integer> maoAtual = new ArrayList<>();
        List<Integer> maoNova = new ArrayList<>();
        for (int index = 0; index < labelX.length; index++) {
            //verifica se o card foi selecionado
            if (labelX[index].getIcon() != null) {
                maoAtual.add(index);
                //gera um card aleatório para realizar a muligação entre eles
                int maoNovaInt = Utils.random(deck.size() - labelX.length) + labelX.length - 1;
                //verifica se o card selecionado já foi selecionado anterior para outra muligação
                while (maoNova.contains(maoNovaInt)) {
                    maoNovaInt = Utils.random(deck.size() - labelX.length) + labelX.length - 1;
                }
                maoNova.add(maoNovaInt);
            }
        }
        //verifica se algum card foi selecionado
        if (!maoAtual.isEmpty()) {
            for (int index = 0; index < maoAtual.size(); index++) {
                Card card = deck.get(maoAtual.get(index));
                deck.add(maoNova.get(index), card);
                deck.remove((int) maoAtual.get(index));
                card = deck.get(maoNova.get(index));
                deck.add(maoAtual.get(index), card);
                deck.remove((int) maoNova.get(index) + 1);
            }
        }
    }

    /**
     * Configura o evento ao clicar no card e ativar/desativar a imagem X
     * (vermelho)
     *
     * @param index índice do card exibido para muligar
     * @return evento do mouse ao ser clicado
     */
    private MouseAdapter eventoClicarNoCard(int index) {
        return new java.awt.event.MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                if (labelX[index].getIcon() == null) {
                    labelX[index].setIcon(muligar_x);
                } else {
                    labelX[index].setIcon(null);
                }
            }
        };
    }

    /**
     * Configura o evento ao clicar na imagem X do card edesativar a imagem X
     *
     * @param index índice do card exibido para muligar
     * @return evento do mouse ao ser clicado
     */
    private MouseAdapter eventoClicarNaImagemX(int index) {
        return new java.awt.event.MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelX[index].setIcon(null);
            }
        };
    }
}